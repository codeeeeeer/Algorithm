问题描述：
	翻转一个链表
	
样例：
	给出一个链表1->2->3->null，这个翻转后的链表为3->2->1->null
	
解决代码：
	public ListNode reverse(ListNode head) {
    	//当链表为空时，直接返回null
    	if (head == null) return null;
    	
    	//先取下头结点的值，存放好
    	ListNode node = new ListNode(head.val);
    	while (head.next != null) {
    		//然后依次往后遍历，只要后面还有节点，就将取出下一个节点值
    		//新建一个节点，并新节点的后继节点设置为当前节点
    		//相当于新建将原链表的后继节点添加到前面
    		ListNode node2 = new ListNode(head.next.val);
    		node2.next = node;
    		node = node2;
    		head = head.next;
		}
        return node;
    }
	
ListNode：

class ListNode {
    int val;
    ListNode next;
    ListNode(int x) {
        val = x;
        next = null;
    }
    
    @Override
    public String toString() {
    	return next == null ? val + "" : val + "-->" + next.toString();
    }
}

测试代码：
	@Test
	public void test(){
		ListNode node3 = new ListNode(3);
		ListNode node2 = new ListNode(2);
		node2.next = node3;
		ListNode node1 = new ListNode(1);
		node1.next = node2;
		System.out.println(node1);
		
		ListNode reverse = reverse(node1);
		
		System.out.println(reverse);
	}